AWSTemplateFormatVersion: 2010-09-09
Description: Template to Create CloudHSMv2 Cluster and initialize it
Resources:
  LambdaExecutionRoleForCloudHSM:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CloudhsmPowerUser
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'cloudhsm:DescribeClusters'
                  - 'cloudhsm:CreateCluster'
                  - 'cloudhsm:CreateHsm'
                  - 'cloudhsm:InitializeCluster'
                  - 'cloudhsm:ListTags'
                  - 'cloudhsm:TagResource'
                  - 'cloudhsm:UntagResource'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeNetworkInterfaceAttribute'
                  - 'ec2:DetachNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:CreateSecurityGroup'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:AuthorizeSecurityGroupEgress'
                  - 'ec2:RevokeSecurityGroupEgress'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DeleteSecurityGroup'
                  - 'ec2:CreateTags'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DescribeSubnets'
                  - 'states:StartExecution'
                  - 'iam:CreateServiceLinkedRole'
                  - 'ssm:PutParameter'
                  - 'ssm:SendCommand'
                Resource: '*'
  CreateCluster:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
        - LambdaExecutionRoleForCloudHSM
        - Arn
      Code:
        ZipFile: |
          """" Lambda to Create CloudHSMv2 Cluster """
          import boto3, json

          def lambda_handler(event, context):
              REGION = event['Region']  # region to launch Cluster #
              #VPC_ID = event['VPC']
              SUBNET1 = event['Subnet1']
              SUBNET2 = event['Subnet2']
              #AZ1 = event['AZ1']
              #AZ2 = event['AZ2']

              cloudhsmv2 = boto3.client('cloudhsmv2', region_name=REGION)
              cluster = cloudhsmv2.create_cluster(SubnetIds=[SUBNET1,SUBNET2],HsmType='hsm1.medium')
              print "New Cluster created."
              cluster_id = cluster['Cluster']['ClusterId']
              print cluster_id

              return cluster_id          
      Runtime: python2.7
      Timeout: '3'
  DescribeClusters:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
        - LambdaExecutionRoleForCloudHSM
        - Arn
      Code:
        ZipFile: |
          """" Lambda to Check CloudHSMv2 Cluster status """
          import boto3, json
          def lambda_handler(event, context):
              REGION = event['Region']  # region to launch Cluster #
              CLUSTER_ID = event['Cluster_Id']

              cloudhsmv2 = boto3.client('cloudhsmv2', region_name=REGION)

              try:
                  # Call Describe Cluster
                  cluster_data = cloudhsmv2.describe_clusters(Filters={'clusterIds': [CLUSTER_ID]})
                  cluster_status = cluster_data['Clusters'][0]['State']
                  availablity_zones = cluster_data['Clusters'][0]['SubnetMapping'].keys()
                  security_group = cluster_data['Clusters'][0]['SecurityGroup']
                  
                  #Check if there HSM in the cluster to json parsing error
                  hsms = cluster_data['Clusters'][0]['Hsms']
                  if not hsms:
                      hsm_status = 'None'
                      hsm_ip = 'None'
                  else:
                      hsm_status = cluster_data['Clusters'][0]['Hsms'][0]['State']
                      hsm_ip = cluster_data['Clusters'][0]['Hsms'][0]['EniIp']

                  # Log response from Cluster
                  print "Cluster Status:", cluster_status
                  print "AZ1:", availablity_zones[0]
                  print "AZ2:", availablity_zones[1]
                  print "Cluster Security Group:", security_group
                  print "HSM IP;", hsm_ip
                  print "HSM Status:", hsm_status

                  # Return the Status
                  #return cluster_status
                  return {'Cluster_Id': CLUSTER_ID, 'Cluster_Status' : cluster_status, 'Hsm_Status' : hsm_status, 'AZ1':availablity_zones[0], 'AZ2': availablity_zones[1], 'Hsm_Ip' : hsm_ip, 'Security_Group': security_group}

              except Exception as e:
                  print(e)
                  message = 'Error getting Cluster Status'
                  print(message)
                  raise Exception(message)
      Runtime: python2.7
      Timeout: '3'
  CreateHSM:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
        - LambdaExecutionRoleForCloudHSM
        - Arn
      Code:
        ZipFile: |
          """" Lambda to Create CloudHSMv2 Cluster """
          import boto3, json

          def lambda_handler(event, context):
              REGION = event['Region']  # region to launch Cluster #
              CLUSTER_ID = event['Cluster_Id']
              AZ1 = event['Cluster_Output']['AZ1']
              AZ2 = event['Cluster_Output']['AZ2']

              cloudhsmv2 = boto3.client('cloudhsmv2', region_name=REGION)
              hsm_id = (cloudhsmv2.create_hsm(ClusterId=CLUSTER_ID,AvailabilityZone=AZ1))['Hsm']['HsmId']
              print "New HSM " + hsm_id + " created"
              hsm_status = (cloudhsmv2.describe_clusters(Filters={'clusterIds': [CLUSTER_ID]}))['Clusters'][0]['Hsms'][0]['State']
              print hsm_status

              return hsm_status
      Runtime: python2.7
      Timeout: '3'
  InitializeCluster:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt 
        - LambdaExecutionRoleForCloudHSM
        - Arn
      Code:
        ZipFile: |
          const exec = require('child_process').exec;
          const fs = require("fs");
          process.env.HOME = /tmp/;

          exports.handler = function(event, context) {
              var AWS = require('aws-sdk');
              var Region = event.Region
              AWS.config.region = Region;
              var ClusterID = event.Cluster_Id
              var cloudhsmv2 = new AWS.CloudHSMV2({apiVersion: '2017-04-28'});
              var ssm = new AWS.SSM({apiVersion: '2014-11-06'});
              var params = {
                Filters: {
                  'clusterIds': [
                      ClusterID,
                    ],
                },
              };
              cloudhsmv2.describeClusters(params, function(err, data) {
                  if (err) console.log(err, err.stack);
                  else {     console.log();
                  var csr = data['Clusters'][0]['Certificates']['ClusterCsr']
                  fs.writeFileSync('/tmp/ClusterCSR.csr', csr);
            exec('openssl req -x509 -newkey rsa:2048 -keyout /tmp/customerCA.key -out /tmp/customerCA.crt -subj "/C=US/ST=LasVegas/L=Nevada/O=amazon.com/OU=aws/CN=aws-keeping-secrets.com" -days 3652 -nodes', (error, stdout, stderr) => {
              if (error) {
                throw error;
              }
              else {
                exec('openssl x509 -req -days 3652 -in /tmp/ClusterCSR.csr -CA /tmp/customerCA.crt -CAkey /tmp/customerCA.key -CAcreateserial -out /tmp/CustomerHsmCertificate.crt', (error, stdout, stderr) => {
                  if (error) {
                    throw error;
                  }
                  else {
                      var cbytes = fs.readFileSync("/tmp/customerCA.crt");
                      var cbascii = new Buffer(cbytes).toString('ascii');
                      var cb64 = new Buffer(cbytes).toString('base64');

                      var kbytes = fs.readFileSync("/tmp/customerCA.key");
                      var kb64 = new Buffer(kbytes).toString('base64');

                      var cxcrbytes = fs.readFileSync("/tmp/CustomerHsmCertificate.crt");
                      var cxcrbascii = new Buffer(cxcrbytes).toString('ascii');
                      
                      var params = {
                          Name: ClusterID +'_customerCACertificate',
                          Type: 'SecureString', 
                          Value: cb64 ,
                          Description: ClusterID + '_customerCACertificate',
                          Overwrite: false
                        };
                        ssm.putParameter(params, function(err, data) {
                          if (err) console.log(err, err.stack);
                          else     console.log(data); 
                        });
                        
                        var params = {
                          Name: ClusterID +'_customerCAKey',
                          Type: 'SecureString',
                          Value: kb64 ,
                          Description: ClusterID + '_customerCAKey',
                          Overwrite: false
                        };
                        ssm.putParameter(params, function(err, data) {
                          if (err) console.log(err, err.stack);
                          else     console.log(data);
                        });
                      

                      var params = {
                          ClusterId: ClusterID,
                          SignedCert: cxcrbascii,
                          TrustAnchor: cbascii
                        };
                        cloudhsmv2.initializeCluster(params, function(err, data) {
                          if (err) console.log(err, err.stack);
                          else     {
                            console.log(data)
                            context.succeed(data['State'])
                          }
                        });
                  }});}});
              }});
          }
      Runtime: nodejs8.10
      Timeout: '90'
  ExecuteStepfunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python2.7
      Handler: index.handler
      Role: !GetAtt 
        - LambdaExecutionRoleForCloudHSM
        - Arn
      Timeout: 50
      Code:
        ZipFile: |
          import boto3, json, traceback, time
          import cfnresponse
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              response_data = {}
              try:
              
                  client = boto3.client('stepfunctions',region_name=event['ResourceProperties']["StateRegions"])
                  if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                      logger.info("Event Body - " + json.dumps(event))

                      SecretsMgrSubnet01 = event['ResourceProperties']['SecretsMgrSubnet01Id']
                      SecretsMgrSubnet02 = event['ResourceProperties']['SecretsMgrSubnet02Id']                      
                      executestate = event['ResourceProperties']['ExecuteStateArn']                                            
                      Region = event['ResourceProperties']["StateRegions"]
                      StateArn = client.start_execution(
                          stateMachineArn=executestate,
                          input="{\"Region\":\"" + Region + "\",\"Subnet1\":\""+ SecretsMgrSubnet01 + "\",\"Subnet2\":\""+ SecretsMgrSubnet02 +"\"}"                          
                          )['executionArn']

                      logger.info("executionArn - " + StateArn)
                      response_data['executeArn'] = StateArn

                      logger.info("Response - " + json.dumps(response_data))
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, StateArn)

                  elif event["RequestType"] == "Delete":
                      logger.info("Event Body - " + json.dumps(event))
                      cfnresponse.send(event, context, cfnresponse.SUCCESS,{})
                  else:
                      logger.info("Event Body - " + json.dumps(event))
                      cfnresponse.send(event, context, cfnresponse.FAILED,{})
              except Exception as e:
                  msg = 'See details in CloudWatch Log Stream: ' + context.log_stream_name
                  response_data['exception'] = str(e)[0:255] + '... ' + msg
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
  ExecuteStepCustom:
    Type: 'Custom::ExecuteStepCustom'
    Properties:
      ServiceToken: !GetAtt 
        - ExecuteStepfunction
        - Arn
      StateRegions: !Ref 'AWS::Region'
      ExecuteStateArn: !Ref LaunchCloudHSMCluster
      #SecretsMgrSubnet01Id: subnet-XXXXXXXX  #Subnet in AZ1 in the same VPC
      #SecretsMgrSubnet02Id: subnet-XXXXXXXX  #Subnet in AZ2 in the same VPC
      SecretsMgrSubnet01Id: !ImportValue SecretsMgrSubnet01Id
      SecretsMgrSubnet02Id: !ImportValue SecretsMgrSubnet02Id

  BootstrapClient:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
        - LambdaExecutionRoleForCloudHSM
        - Arn
      Code:
        ZipFile: !Sub 
        - |
          import boto3, json

          def lambda_handler(event, context):
              REGION = event['Region']
              CLUSTER_ID = event['Cluster_Id']
              #INSTANCE_ID = event['Instance_Id']
              #INSTANCE_ID = event['ResourceProperties']['Instance_Id'] #in CloudFormation or !ImportValue
              #INSTANCE_SG = event['Instance_sg']
              #INSTANCE_SG = event['ResourceProperties']['Instance_sg'] #in CloudFormation or !ImportValue
              HSM_IP = event['Cluster_Output']['Hsm_Ip']
              CLUSTER_SG =  event['Cluster_Output']['Security_Group']
              
              ssm = boto3.client('ssm', region_name=REGION)
              ec2 = boto3.client('ec2', region_name=REGION)
              
              #construct Parameters with variables
              Parameters_Input = {'workingDirectory': [''],'executionTimeout': ['3600']}
              commands = ['sudo yum update -y', 'sleep 10', 'wget https://s3.amazonaws.com/cloudhsmv2-software/CloudHsmClient/EL7/cloudhsm-client-latest.el7.x86_64.rpm', 'sudo yum install -y ./cloudhsm-client-latest.el7.x86_64.rpm', 'sleep 10']
              commands.append('aws ssm get-parameter --name ' + CLUSTER_ID + '_customerCACertificate --with-decryption --region ' + REGION + ' --output text --query Parameter.Value | base64 --decode > /opt/cloudhsm/etc/customerCA.crt')
              commands.append('sudo /opt/cloudhsm/bin/configure -a ' + HSM_IP)
              Parameters_Input['commands'] = commands
              
              #Send command to EC2 instance
              Script = ssm.send_command(InstanceIds=['${INSTANCE_ID}'],DocumentName='AWS-RunShellScript',Parameters=Parameters_Input, MaxConcurrency='50', MaxErrors='0', TimeoutSeconds=600, CloudWatchOutputConfig={'CloudWatchOutputEnabled':True,'CloudWatchLogGroupName':'BootStrapClient'})
              
              #Update Culuster Security Groups with Instance Security Group
              Update_SG = ec2.authorize_security_group_ingress(GroupId=CLUSTER_SG,IpPermissions=[{'IpProtocol':'tcp','FromPort': 2223,'ToPort': 2225,'UserIdGroupPairs': [{ 'GroupId': '${INSTANCE_SG}' }] }],)
              
              print Script
              return 'Sent Command to :' + '${INSTANCE_ID}'
        - {
          #INSTANCE_ID: i-0e84c2ff085c3b7fd,
          #INSTANCE_SG: sg-0f0b235c47dbc8623,
          INSTANCE_ID: !ImportValue WPInstanceId,
          INSTANCE_SG: !ImportValue WPSGId
          }

      Runtime: python2.7
      Timeout: '30'
  
  
  StatesExecutionRoleForCloudHSM:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'
  LaunchCloudHSMCluster:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          |-
          {
            "Comment": "Creates a CloudHSM and initializes it",
            "StartAt": "CreateCluster",
            "States": {
              "CreateCluster": {
                "Type": "Task",
                "Resource": "${CreateCluster.Arn}",
                "Next": "wait_cluster_seconds",
                "ResultPath": "$.Cluster_Id"
              },
              "wait_cluster_seconds": {
                "Type": "Wait",
                "Seconds": 30,
                "Next": "ClusterStatus"
              },
              "ClusterStatus": {
                "Type": "Task",
                "Resource": "${DescribeClusters.Arn}",
                "Next": "ClusterReady?",
                "ResultPath": "$.Cluster_Output"
              },
              "ClusterReady?": {
                "Type": "Choice",
                "Choices": [{
                  "Variable": "$.Cluster_Output.Cluster_Status",
                  "StringEquals": "UNINITIALIZED",
                  "Next": "CreateHSM"
                }, {
                  "Variable": "$.Cluster_Output.Cluster_Status",
                  "StringEquals": "INITIALIZED",
                  "Next": "BootstrapClient"
                },{
                  "Variable": "$.Cluster_Output.Cluster_Status",
                  "StringEquals": "DEGRADED",
                  "Next": "Job Failed"
                }
              ],
                "Default": "wait_cluster_seconds"
              },
              "Job Failed": {
                "Type": "Fail",
                "Cause": "Create Cluster Failed",
                "Error": "Cluster failed to start in a healthy state"
              },
              "CreateHSM": {
                "Type": "Task",
                "Resource": "${CreateHSM.Arn}",
                "Next": "wait_hsm_seconds",
                "ResultPath": "$.Cluster_Output.Hsm_Status"
              },
              "wait_hsm_seconds": {
                "Type": "Wait",
                "Seconds": 30,
                "Next": "HsmStatus"
              },
              "HsmStatus": {
                "Type": "Task",
                "Resource": "${DescribeClusters.Arn}",
                "Next": "HsmActive?",
                "ResultPath": "$.Cluster_Output"
              },
                  "HsmActive?": {
                "Type": "Choice",
                "Choices": [{
                  "Variable": "$.Cluster_Output.Hsm_Status",
                  "StringEquals": "ACTIVE",
                  "Next": "InitializeCluster"
                }, {
                  "Variable": "$.Cluster_Output.Hsm_Status",
                  "StringEquals": "DEGRADED",
                  "Next": "Job Failed"
                }],
                "Default": "wait_hsm_seconds"
              },
                  "InitializeCluster": {
                "Type": "Task",
                "Resource": "${InitializeCluster.Arn}",
                "Next": "wait_cluster_seconds",
                "ResultPath": "$.Cluster_Output.Cluster_Status"
              },
              "BootstrapClient": {
                      "Type": "Task",
                "Resource": "${BootstrapClient.Arn}",
                "ResultPath": "$.Cluster_Output",
                "End": true
              }
            }
          }
      RoleArn: !GetAtt StatesExecutionRoleForCloudHSM.Arn
Outputs:
  executionARN:
    Description: The ARN of the execution
    Value: !GetAtt 
      - ExecuteStepCustom
      - executeArn
